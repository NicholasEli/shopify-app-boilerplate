import React, { cloneElement } from 'react';
import { useServerRequest } from '../ServerRequestProvider';
import { matchPath } from '../../utilities/matchPath';
import { Boomerang } from '../Boomerang/Boomerang.client';
import { RouteParamsProvider } from '../useRouteParams/RouteParamsProvider.client';
import { useServerAnalytics } from '../Analytics';
/**
 * The `Route` component is used to set up a route in Hydrogen that's independent of the file system. Routes are
 * matched in the order that they're defined.
 */
export function Route({ path, page }) {
    var _a;
    const request = useServerRequest();
    const { routeRendered, serverProps } = request.ctx.router;
    if (routeRendered)
        return null;
    if (path === '*') {
        request.ctx.router.routeRendered = true;
        return cloneElement(page, serverProps);
    }
    const match = matchPath(serverProps.pathname, {
        path,
        exact: true,
    });
    if (match) {
        request.ctx.router.routeRendered = true;
        request.ctx.router.routeParams = match.params;
        const name = (_a = page === null || page === void 0 ? void 0 : page.type) === null || _a === void 0 ? void 0 : _a.name;
        useServerAnalytics({
            templateName: name,
        });
        return (React.createElement(RouteParamsProvider, { routeParams: match.params },
            cloneElement(page, { params: match.params || {}, ...serverProps }),
            name ? React.createElement(Boomerang, { pageTemplate: name }) : null));
    }
    return null;
}
