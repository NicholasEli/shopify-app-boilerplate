"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Analytics = void 0;
const react_1 = __importDefault(require("react"));
const hook_1 = require("./hook");
const Analytics_client_1 = require("./Analytics.client");
const ServerRequestProvider_1 = require("../ServerRequestProvider");
const DELAY_KEY = 'analytics-delay';
function Analytics() {
    const cache = (0, ServerRequestProvider_1.useServerRequest)().ctx.cache;
    // If render cache is empty, create a 50 ms delay so that React doesn't resolve this
    // component too early and potentially cause a mismatch in hydration
    if (cache.size === 0 && !cache.has(DELAY_KEY)) {
        let result;
        let promise;
        cache.set(DELAY_KEY, () => {
            if (result !== undefined) {
                return result;
            }
            if (!promise) {
                promise = new Promise((resolve) => {
                    setTimeout(() => {
                        result = true;
                        resolve(true);
                    }, 50);
                });
            }
            throw promise;
        });
    }
    // Make sure all queries have returned before rendering the Analytics server component
    cache.forEach((cacheFn) => {
        if (cacheFn && typeof cacheFn === 'function') {
            const result = cacheFn.call();
            if (result instanceof Promise)
                throw result;
        }
    });
    const analyticsData = (0, hook_1.useServerAnalytics)();
    return react_1.default.createElement(Analytics_client_1.Analytics, { analyticsDataFromServer: analyticsData });
}
exports.Analytics = Analytics;
